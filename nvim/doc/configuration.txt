*configuration.txt*                 Config with as many defaults as convenient

Authors:
  Jonas Zeltner <jonas.zeltner@posteo.de>

                                       Type |gO| to see the table of contents.

==============================================================================
READ THE SOURCE                                    *configuration-read-source*

This help file is best effort, but not comprehensive and could countain
outdated information. If you need to know something for sure, read the source.

==============================================================================
PLUGINS                                                *configuration-plugins*

This configuration uses the following plugins:
- nohlsearch                    |package-nohlsearch|
- nvim-lspconfig                |lspconfig|
- nvim-treesitter               |nvim-treesitter-intro|
- split-term.nvim               |split-term-intro|
- formatlsp.nvim                |formatlsp-intro|

- Modules from |mini.nvim|:
	- |mini.git|
	- |mini.diff|
	- |mini.bracketed|
	- |mini.pick|

==============================================================================
COLORSCHEME                                        *configuration-colorscheme*

The colorscheme is set at init.lua:24. The colorscheme file is
colors/terminal.lua

The colorscheme is neovim's default colorscheme (|news-0.10|), except,
that the |hl-Normal| group is reset to use the terminal's foreground and
background colors.

==============================================================================
REMAPPED KEYS                                    *configuration-remapped-keys*

                                                             *gd-remap*
gd			If a language server supports
			`textDocument/definition`, gd is mapped to
			|vim.lsp.buf.definition()|. Otherwise it's the same as
			|gd|

                                                             *gD-remap*
gD			If a language server supports
			`textDocument/declaration`, gD is mapped to
			|vim.lsp.buf.declaration()|. Otherwise it's the same
			as |gD|

==============================================================================
ADDITIONAL KEYMAPS                          *configuration-additional-keymaps*

                                                             *<Space>-q*
<Space>-q		Delete the current buffer and close windows showing
			it. See |:bdelete|.

                                                             *<Space>-f*
<Space>-f		Open the file explorer in the current file's
			directory. See |:Explore|.

                                                             *gqc*
gqc			Close the quickfix window. See |:cclose|.

                                                             *gqd*
gqd			Add all diagnostics to the quickfix list. See
			|vim.diagnostic.setqflist()|.

                                                             *glc*
glc			Close the location list. See |:lclose|.

                                                             *gld*
gld			Add buffer diagnostics to the location list. See
			|vim.diagnostic.setloclist()|.

                                                             *i_CTRL-H*
i_CTRL-H		In insert mode, jump to the previous placeholder. See
			|vim.snippet.jump()|.

                                                             *i_CTRL-L*
i_CTRL-L		In insert mode, jump to the next placeholder. See
			|vim.snippet.jump()|.

                                                             *[X*
[X			Go to the first conflict marker. See
			|MiniBracketed.conflict()|.

                                                             *]X*
]X			Go to the last conflict marker. See
			|MiniBracketed.conflict()|.

                                                             *[x*
[x			Go to the backward to the next conflict marker. See
			|MiniBracketed.conflict()|.

                                                             *]x*
]x			Go to the forward to the next conflict marker. See
			|MiniBracketed.conflict()|.

                                                             *grl*
grl			Run the code lens available on the current line. See
			|lsp-codelens|.

                                                             *grh*
grh			Toggles inlay hints. See |lsp-inlay-hint|.

                                                             *zV*
zV			Toggles the diff overlay. See
			|MiniDiff.toggle_overlay().|

                                                             *<Space>-<Space>*
<Space>-<Space>		Pick from open buffers. See
			|MiniPick.builtin.buffers()|.

                                                             *<Space>-s.*
<Space>-s.		Resume previous picker. See
			|MiniPick.builtin.resume()|.

                                                             *<Space>-sf*
<Space>-sf		Pick between from files in the current directory. See
			|MiniPick.builtin.files()|.

                                                             *<Space>-sg*
<Space>-sg		Live grep in the current directory. See
			|MiniPick.builtin.grep_live()|.

                                                             *<Space>-sh*
<Space>-sh		Pick from help tags. See
			|MiniPick.builtin.help()|.

                                                             *<Space>-sr*
<Space>-sr		Pick from recent files. Uses |v:oldfiles|.

                                                             *CTRL-<Space>*
CTRL-Space		Toggle the split terminal. Configure with
			|g:splitterm_shell| and |g:splitterm_vertical|.

==============================================================================
TREESITTER AUTOINSTALL                  *configuration-treesitter-autoinstall*

This configuration will attempt to install treesitter parser and queries for
any file you open using |nvim-treesitter.install()|.

To see installed parers run `:checkhealth nvim-treesitter`.

The following parsers will always be installed:
- c
- lua
- markdown
- markdown_inline
- vim
- vimdoc
- comment
- diff

==============================================================================
FORMAT ON SAVE                                  *configuration-format-on-save*

This configuration will attempt to format using the language-server protocol.
The |global-local| variable `formatlsp` determines the language server that
should format a buffer.

                                                   *g:formatlsp* *b:formatlsp*
If `b:formatlsp` is unset, `g:formatlsp` will be used. If `g:formatlsp` is
unset, use all attached language servers to format the buffer.

To use a specific language server: >lua
	vim.g.formatlsp = "your-language-server"
< or per buffer: >lua
	vim.b.formatlsp = false  -- Disables format on save for the current
                                 -- buffer
< with vimscript: >vim
	let b:formatlsp = v:true  " Format with all attached language servers
<

                                       *configuration-format-on-save-defaults*
By default, `b:formatlsp` is set to...
- `stylua` for `lua` filetype
- `ruff` for `python` filetype

==============================================================================
TOGGLE PERSISTENT SPLIT TERMINAL               *configuration-toggle-terminal*

                                             *g:splitterm_shell* *$NVIM_SHELL*
The terminal's shell will be determined in this order:
1. The global variable `g:splitterm_shell`
2. The environment variable `$NVIM_SHELL`
3. The |'shell'| option.

                                                        *g:splitterm_vertical*
By default, the terminal is shown in a horizontal split. You can open the
 terminal in a vertical split: >vim
	let g:splitterm_vertical = v:true
< or decide orientation based on the terminals width: >lua
	vim.g.splitterm_vertical = function() return vim.o.columns > 130 end
<
vim:tw=78:ts=8:noet:ft=help:norl:
