#!/usr/bin/env sh

first=true

section() {
	if [ $first = true ]; then
		first=false
		printf "\e[2m---* %s *---\e[0m\n" "$1"
	else
		printf "\n\e[2m---* %s *---\e[0m\n" "$1"
	fi
}

section Neovim
bob update

section Dotfiles
git -C "$HOME/dotfiles" fetch
git -C "$HOME/dotfiles" rebase origin/main

# HACK: For now, vim.pack.update() is async but cannot be waited for.
# As a workaround, open the neovim ui and manually confirm the update
section "Neovim plugins"
nvim "+lua vim.schedule(function() vim.pack.update() end)"
# logpath="$(nvim --headless "+=vim.fs.joinpath(vim.fn.stdpath('log'), 'nvim-pack.log')" +quit 2>&1 | tr -d '"')"
# last_update="$(tac "$logpath" | sed '/^========== /q' | tac | tail -n +4)"
# if [ "$last_update" = "" ]; then
# 	echo "Nothing to update"
# else
# 	echo "$last_update" |
# 		sed -E "s/^(## .+)$/\x1b[1;39m\1\x1b[0m/gm" |
# 		sed -E "s/^(> [^!]+)$/\x1b[32m\1\x1b[0m/gm" |
# 		sed -E "s/^(< [^!]+)$/\x1b[31m\1\x1b[0m/gm" |
# 		sed -E "s/^(> .+)$/\x1b[1;32m\1\x1b[0m/gm" |
# 		sed -E "s/^(< .+)$/\x1b[1;31m\1\x1b[0m/gm"
# fi
